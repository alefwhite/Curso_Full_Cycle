# Hello World e Executando o Ubuntu
1 - docker ps - Lista os containers que estão rodando

2 - Criando o primeiro container com a imagem do hello-world
    docker run hello-world - Caso a imagem não exista no pc ele irá baixar do docker hub

3 - docker ps -a - Lista todos os containers ativos e os que já rodaram e estão paradoss

4 - Após rodarmos o container do hello-world que simplesmente ele executa um binário /hello listado na aba COMMAND
    ele da o log da mensagem e depois morre e no final ele deixa fala para rodar o seguinte comando abaixo:

    docker run -it ubuntu bash
    -i - É o modo iterativo que vai manter o processo ativo, vai atachar o nosso terminal com o contêiner que no caso vai ser o bash
    -t - Ele vai liberar o terminal para que possamos digitar comandos dentro do contêiner
    O bash é um comando que passamos para o docker executar que nesse caso ele vai executar o terminal bash e vai manter o contêiner
    ativo.
    Caso eu queira sair do meu contêiner basta digitar CRTL + D

    Explicação da documentação do Docker
    docker run --name test -it debian bash
    Este exemplo executa um contêiner chamado test usando a debian:latest imagem. 
    O -it instrui o Docker a alocar um pseudo-TTY conectado ao stdin do contêiner; criando um bashshell interativo no contêiner. 
    No exemplo, o bashshell é encerrado digitando exit 13. Esse código de saída é passado para o chamador de docker run
    e é registrado nos test metadados do contêiner.


    Para rodar o container novamente podemos executar o comando
        docker ps -a - Lista os containers e podemos pegar o nome ou o id
        docker start id_do_container ou nome_do_container 

    Para parar o container
        docker stop id_do_container ou nome_do_container 
    
    docker run -it --rm ubuntu bash
    --rm - Ele vai executar o contêiner e abrir a interação e quando eu sair do container ele vai deletar esse container

#=====================================================================================================================================

Publicando porta com o servidor nginx

docker run -p 8080:80 nginx

-p -> Seria a forma de espelhar uma porta do docker para a máquina em que ele está sendo executado

8080:80 -> O 8080 seria a porta que escolhemos rodar da nossa máquina e o docker vai redirecionar para a 80 do container


docker run -d -p 8080:80 nginx

-d -> É uma forma de rodarmos o container de modo desatachado, isso faz com que nosso terminal não fique preso 
pois ele não deixa o terminal ficar preso no processo do container, senão tiver essa flag ele fica rodando o processo e se
apertamos crtl + c ele vai deligar o container

#=====================================================================================================================================

Removendo Containers

docker ps - Vai mostrar os container que estão rodando

docker ps -a - Vai mostrar os containers desligados

docker rm + id_do_container ou nome_do_container -> Vai deletar o container que não está rodando

docker rm + id_do_container ou nome_do_container -f -> Vai deletar o container que está rodando, pois o -f significa force

#=====================================================================================================================================

Acessando e alterando arquivos de um container

docker run --name nginx -d -p 8080:80 nginx 
    -> --name nome_do_container da um nome para o container caso não seja informado ele gera um nome
        aleatório


docker exec nome_do_container comando_desejado -> Executa um comando no nosso container

    docker exec nginx ls

    docker exec -it nginx bash -> Entrando no container nginx no modo interativo para mexer no terminal bash
        cd /usr/share/nginx/html/ -> Entrando no diretorio do nginx
        ls -> Listando os arquivos
        apt-get update
        apt-get install vim -> Instalando o vim
        vim index.html -> Dentro do diretorio do nginx executar o vim para que seja possivel modificar o arquivo
        por padrão o vim abre o arquivo somente para leitura, para que seja possivel editar o arquivo devemos digitar i,
        agora podemos modificar alguma coisa no html e depois apertar a tecla esc para sair do modo de edição.
        agora para gravarmos essa modificação devemos apertar a tecla SHIFT + : e depois W
        para sair do vim podemos digitar : q
        é possivel também sair sem gravar a alteração apertando : ! e gravando : wq
        CRTL + D - sai do container

Caso eu mate meu container eu irei perder todas as alterações feitas nele então no tópico abaixo veremos uma forma de salvar essas
alterações mesmo que o container morra
#=====================================================================================================================================

Iniciando com bind mounts

Agora no terminal do ubuntu podemos voltar até o diretorio raiz e criarmos uma pasta Projects e dentro dela fullcyle e criamos um
arquivo index.html -> touch index.html depois podemos dar um vim index.html criar um h1 e colocar qualquer informação

docker run -d --name nginx -p 8080:80 -v caminho_desejado 
    -> -v vai montar um volume para o container, mais é um comando antigo

docker run -d --name nginx -p 8080:80 -v ~/Projects/fullcyle:/usr/share/ngnix/html nginx
    -> O caminho antes do dois pontos é uma pasta do computador que desejamos criar no container
    -> O caminho depois dos dois pontos é o caminho onde queremos que a pasta seja criada

Dessa forma se matarmos nosso container se tivermos arquivos dentro da pasta que foi espelhada eles não serão deletados

Forma mais atual de espelharmos uma pasta do computador para o container
    docker run -d --name nginx -p 8080:80 --mount type=bind,source=~/Projects/fullcyle:/usr/share/ngnix/html nginx
    docker run -d --name nginx -p 8080:80 --mount type=bind,source="$(pwd)"/html,target=/usr/share/nginx/html nginx 
        -> Podemos dar um echo $(pwd) no terminal para vermos o caminho todo
        -> $(pwd) ele pega o caminho que estamos apontado no terminal   


A diferença entre o -v e o --mount é que se eu passar um caminho que tenha um pasta que não exista ele dará um erro agora 
o -v ele criará essa pasta que não existe 

#=====================================================================================================================================

Trabalhando com volumes

docker volume
docker volume ls

Criando um volume
    docker volume create meuvolume

Listar volumes    
    docker volume ls

Inspecionar volume
    docker volume inspect meuvolume

Remover um volume 
 docker volume rm meuvolume


docker run --name nginx -d -p 8080:80 --mount type=volume,source=meuvolume,target=/app nginx

Agora podemos entrar no terminal do nosso container nginx
    docker exec -it nginx bash
    cd /app/
    ls
    touch oi
    CTRL + D


Agora podemos criar um container nginx2
    docker run --name nginx2 -d -p 8081:80 --mount type=volume,source=meuvolume,target=/app nginx

Agora podemos entrar no terminal do nosso container nginx2
    docker exec -it nginx2 bash
    cd /app/
    ls

E nesse caso veremos que o arquivo oi que foi criado no container nginx também aparece no container nginx2 por conta do volume

Agora podemos criar um container nginx3 e usar o comando -v
    docker run --name nginx3 -d -p 8082:80 -v meuvolume:/app nginx
    docker exec -it nginx3 bash
    cd /app/
    ls

Caso eu tenho alguns volumes com alguns arquivos que não estão sendo usados e ocupando capacidade do meu computador eu posso digitar
o seguinte comando -> docker volume prune -> y
#=====================================================================================================================================

Trabalhando com Imagens

https://hub.docker.com/ -> Repositório onde fica as imagens do docker

Por padrão sempre que tivermos que subir uma imagem para o docker hub devemos subir uma como latest e a outra com a versão que definimos

Como baixar uma imagem
    docker pull nome_da_imagem desejada -> Por pdrão ele vai baixar a latest da imagem


Como listar as imagens já baixadas
    docker images

Como remover uma nome_da_imagem
    docker rmi nome_da_imagem:tag ->  A tag da imagem a gente pode ver através do comando docker images


Criando a primeira imagem com Dockerfile
DOCKERFILE - O Dockerfile nada mais é do que um meio que utilizamos para criar nossas próprias imagens. 
Em outras palavras, ele serve como a receita para construir um container, 
permitindo definir um ambiente personalizado e próprio para meu projeto pessoal ou empresarial.


Criar uma pasta para fazer esse módulo -> Na raiz do projeto criar uma pasta com o nome 3-Docker-Comandos e detro dela um Dockerfile
e uma pasta html

Criação de uma imagem usando dockerfile	
	1 - Abrir o vsocde e criar um arquivo Dockerfile
	2 - Primeira instrução no dockerfile deve ser a imagem que queremos usar - Ex FROM nginx
	3 - Segunda instrução podemos colocar alguns comandos que queremos executar no container 
        - Ex: RUN apt-get update - RUN apt-get install curl --yes - RUN apt-get install vim --yes	
========================================================================================================================================================================
    Exemplo usado na aula:
        FROM nginx:latest
        RUN apt-get update
        RUN apt-get install vim -y

    docker image build -t  11072012/nginx-com_vim:latest .
                        nome_do_usuario_dockerhub/nome_da_imagem

    -t -> Nome da tag

    Avaçando com dockerfile:
        No dockerfile iremos incluir novas propriedades

            FROM nginx:latest
            WORKDIR /app -> Criando o diretorio de trabalho
            RUN apt-get update && \
            apt-get install vim -y
            COPY html/ /usr/share/nginx/html-> html é a pasta que queremos copiar para dentro do diretorio do container

    